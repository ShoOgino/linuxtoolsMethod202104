	public DockerContainerConfig getDockerContainerConfig() {
		final ImageRunSelectionModel selectionModel = this.imageRunSelectionPage
				.getModel();
		final ImageRunResourceVolumesVariablesModel resourcesModel = this.imageRunResourceVolumesPage
				.getModel();

		final Builder config = new DockerContainerConfig.Builder()
				.cmd(selectionModel.getCommand())
				.entryPoint(selectionModel.getEntrypoint())
				.image(selectionModel.getSelectedImageName())
				.tty(selectionModel.isAllocatePseudoTTY())
				.openStdin(selectionModel.isInteractiveMode());
		if (resourcesModel.isEnableResourceLimitations()) {
			// memory limit must be converted from MB to bytes
			config.memory(resourcesModel.getMemoryLimit() * MB);
			config.cpuShares(resourcesModel.getCpuShareWeight());
		}
		// environment variables
		final List<String> environmentVariables = new ArrayList<>();
		for (EnvironmentVariableModel var : resourcesModel.getEnvironmentVariables()) {
			environmentVariables.add(var.getName() + "=" + var.getValue()); //$NON-NLS-1$
		}
		config.env(environmentVariables);

		// container labels
		final Map<String, String> labelVariables = new HashMap<>();
		for (LabelVariableModel var : resourcesModel.getLabelVariables()) {
			labelVariables.put(var.getName(), var.getValue()); // $NON-NLS-1$
		}
		config.labels(labelVariables);

		if (!selectionModel.isPublishAllPorts()) {
			final Set<String> exposedPorts = new HashSet<>();
			for (ExposedPortModel exposedPort : selectionModel.getExposedPorts()) {
				// only selected Ports in the CheckboxTableViewer are exposed.
				if (selectionModel.getSelectedPorts() == null
						|| !selectionModel.getSelectedPorts().contains(exposedPort)) {
					continue;
				}
				exposedPorts.add(exposedPort.getContainerPort()
						+ "/" + exposedPort.getPortType()); //$NON-NLS-1$
			}
			config.exposedPorts(exposedPorts);
		}

		Map<String, String> emptyMap = new HashMap<>();
		@SuppressWarnings("rawtypes")
		Map<String, Map> volumes = new HashMap<>();
		for (DataVolumeModel dataVolume : resourcesModel.getDataVolumes()) {
			// only data volumes selected in the CheckBoxTableViewer are
			// included.
			if (!resourcesModel.getSelectedDataVolumes().contains(dataVolume)) {
				continue;
			}
			if (dataVolume.getMountType() == MountType.NONE) {
				volumes.put(dataVolume.getContainerPath(), emptyMap);
			}
		}
		if (!volumes.isEmpty()) {
			config.volumes(volumes);
		}

		return config.build();
	}

