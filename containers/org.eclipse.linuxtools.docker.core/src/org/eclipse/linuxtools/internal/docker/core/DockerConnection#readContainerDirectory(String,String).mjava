	@SuppressWarnings("unused")
	public List<ContainerFileProxy> readContainerDirectory(final String id,
			final String path) throws DockerException {
		List<ContainerFileProxy> childList = new ArrayList<>();
		try {
			DockerClient copyClient = getClientCopy();
			final ExecCreation execCreation = copyClient.execCreate(id,
					new String[] { "/bin/sh", "-c", "ls -l -F -Q " + path }, //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
					ExecCreateParam.attachStdout(),
					ExecCreateParam.attachStderr());
			final String execId = execCreation.id();
			final LogStream pty_stream = copyClient.execStart(execId);
			String lastLine = ""; //$NON-NLS-1$
			try {
				while (pty_stream.hasNext()) {
					ByteBuffer b = pty_stream.next().content();
					byte[] buffer = new byte[b.remaining()];
					b.get(buffer);
					String s = lastLine + new String(buffer);
					String[] lines = s.split("\\r?\\n"); //$NON-NLS-1$
					if (lines.length > 0) {
						lastLine = lines[lines.length - 1];
					} else {
						lastLine = ""; //$NON-NLS-1$
					}
					for (int i = 0; i < lines.length - 1; ++i) {
						String line = lines[i];
						processDirectoryLine(line, path, childList);
					}
				}
				if (!lastLine.isEmpty()) {
					processDirectoryLine(lastLine, path, childList);
				}
			} finally {
				if (pty_stream != null)
					pty_stream.close();
				if (copyClient != null)
					copyClient.close();
			}
		} catch (Exception e) {
			if (e.getCause() instanceof IOException) {
				// ugly hack as we often get Connection reset by peer exceptions
				// so retry
				return readContainerDirectory(id, path);
			}
			// e.printStackTrace();
		}
		return childList;
	}

