	public static WritableByteChannel getOutputStream(LogStream stream, String uri) throws Exception {
		final String[] fields = new String[] {
				"reader", //$NON-NLS-1$
				"stream", //$NON-NLS-1$
				"original", //$NON-NLS-1$
				"input", //$NON-NLS-1$
				"in", //$NON-NLS-1$
				"in", //$NON-NLS-1$
				"wrappedStream", //$NON-NLS-1$
				"in", //$NON-NLS-1$
				"inStream" //$NON-NLS-1$
		};
		final String[] declared = new String[] {
				"org.mandas.docker.client.DefaultLogStream",
				LogReader.class.getName(),
				"org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream", //$NON-NLS-1$
				"org.glassfish.jersey.message.internal.EntityInputStream", //$NON-NLS-1$
				FilterInputStream.class.getName(),
				FilterInputStream.class.getName(),
				"org.apache.http.conn.EofSensorInputStream", //$NON-NLS-1$
				"org.apache.http.impl.io.IdentityInputStream", //$NON-NLS-1$
				"org.apache.http.impl.io.SessionInputBufferImpl" }; //$NON-NLS-1$
		final String [] bundles = new String[] {
				"org.glassfish.jersey.core.jersey-common", //$NON-NLS-1$
				"org.apache.httpcomponents.httpcore", //$NON-NLS-1$
				"org.apache.httpcomponents.httpclient" //$NON-NLS-1$
		};

		List<String[]> list = new LinkedList<>();
		for (int i = 0; i < fields.length; i++) {
			list.add(new String[] { declared[i], fields[i] });
		}

		try {
			// See org.apache.http.impl.conn.LoggingManagedHttpClientConnection#getSocketInputStream()
			// We need to perform : LogFactory.getLogger("org.apache.http.wire").isDebugEnabled()
			Class<?> cLogFactory = null;
			Class<?> cLog = null;
			final String[] commonsLogging = new String[] { "org.apache.commons.logging" }; //$NON-NLS-1$
			cLogFactory = loadClass("org.apache.commons.logging.LogFactory", commonsLogging); //$NON-NLS-1$
			cLog = loadClass("org.apache.commons.logging.Log", commonsLogging); //$NON-NLS-1$
			if (cLogFactory != null && cLog != null) {
				Method mGetLog = cLogFactory.getMethod("getLog", String.class); //$NON-NLS-1$
				Object log = mGetLog.invoke(null, "org.apache.http.wire"); //$NON-NLS-1$
				Method mIsDebug = cLog.getMethod("isDebugEnabled"); //$NON-NLS-1$
				Boolean isDebug = (Boolean) mIsDebug.invoke(log);
				if (isDebug.booleanValue()) {
					list.add(new String[] { "org.apache.http.impl.conn.LoggingInputStream", "in" }); //$NON-NLS-1$ //$NON-NLS-2$
				}
			}
		} catch (Exception e) {
		}

		if (uri.startsWith("unix:")) { //$NON-NLS-1$
			list.add(new String[] { "sun.nio.ch.ChannelInputStream", "ch" }); //$NON-NLS-1$ //$NON-NLS-2$
		} else if (uri.startsWith("https:")) { //$NON-NLS-1$
			float jvmVersion = Float.parseFloat(System.getProperty("java.specification.version")); //$NON-NLS-1$
			String fName;
			if (jvmVersion < 1.9f) {
				fName = "c"; //$NON-NLS-1$
			} else {
				fName = "socket"; //$NON-NLS-1$
			}
			list.add(new String[] { "sun.security.ssl.AppInputStream", fName }); //$NON-NLS-1$
		} else {
			float jvmVersion = Float.parseFloat(
					System.getProperty("java.specification.version")); //$NON-NLS-1$
			if (jvmVersion < 13f) {
				list.add(new String[] { "java.net.SocketInputStream", //$NON-NLS-1$
						"socket" }); //$NON-NLS-1$
			}
		}

		Object res = getInternalField(stream, list, bundles);
		if (res instanceof WritableByteChannel) {
			return (WritableByteChannel) res;
		} else if (res != null && res.getClass().getCanonicalName()
				.equals("java.net.Socket.SocketInputStream")) { //$NON-NLS-1$
			// if we are here, we are Java 13 or higher and have to use an
			// alternate field reflection to get the socket
			List<String[]> list2 = new LinkedList<>();
			list2.add(new String[] { "java.net.Socket$SocketInputStream", //$NON-NLS-1$
					"parent" }); //$NON-NLS-1$
			res = getInternalField(res, list2, bundles);
		}

		if (res instanceof Socket) {
			return Channels.newChannel(((Socket) res).getOutputStream());
		} else {
			// TODO: throw an exception and let callers handle it.
			return null;
		}
	}

