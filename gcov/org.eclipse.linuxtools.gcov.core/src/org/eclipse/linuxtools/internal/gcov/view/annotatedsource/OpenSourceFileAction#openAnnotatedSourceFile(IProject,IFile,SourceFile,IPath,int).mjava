    public static void openAnnotatedSourceFile(IProject project, IFile binary, SourceFile sourceFile, IPath realLocation,
            int lineNumber) {
    	PlatformUI.getWorkbench().getDisplay().syncExec(() -> {
        IWorkbenchPage page = CUIPlugin.getActivePage();
        if (page != null) {
            IFileStore fs = getFileStore(project, realLocation);
            if (fs == null && !realLocation.isAbsolute() && binary != null) {
                IPath p = binary.getProjectRelativePath().removeLastSegments(1);
                fs = getFileStore(project, p.append(realLocation));
            }
            if (fs == null) {
                try {
                    page.openEditor(new STAnnotatedSourceNotFoundEditorInput(project, sourceFile, realLocation,
                            lineNumber), STAnnotatedSourceNotFoundEditor.ID, true);
					} catch (PartInitException e) {
						Status s = new Status(IStatus.ERROR, Constants.PLUGIN_ID, IStatus.ERROR,
								Messages.OpenSourceFileAction_open_error, e);
						Platform.getLog(FrameworkUtil.getBundle(OpenSourceFileAction.class)).log(s);
					}
            } else {
                try {
                    IEditorPart editor = IDE.openEditorOnFileStore(page, fs);
                    if (lineNumber > 0 && editor instanceof ITextEditor) {
                        IDocumentProvider provider = ((ITextEditor) editor).getDocumentProvider();
                        IDocument document = provider.getDocument(editor.getEditorInput());
                        try {
                            int start = document.getLineOffset(lineNumber - 1);
                            ((ITextEditor) editor).selectAndReveal(start, 0);
                        } catch (BadLocationException e) {
                            // ignore
                        }
                        IWorkbenchPage p = editor.getSite().getPage();
                        p.activate(editor);
                    }
					} catch (PartInitException e) {
						Status s = new Status(IStatus.ERROR, Constants.PLUGIN_ID, IStatus.ERROR,
								Messages.OpenSourceFileAction_open_error, e);
						Platform.getLog(FrameworkUtil.getBundle(OpenSourceFileAction.class)).log(s);
					}
            }

        }
    	});
    }

