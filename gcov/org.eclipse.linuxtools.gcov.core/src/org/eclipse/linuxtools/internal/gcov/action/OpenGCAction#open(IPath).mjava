    @Override
    public void open(IPath file) {
        final GCFilePair pair = new GCFilePair(file);
        Shell shell = PlatformUI.getWorkbench().getDisplay().getActiveShell();
        if (!isFileValid(pair.gcda)) {
            String msg = NLS.bind(Messages.OpenGCAction_file_dne_run, pair.gcda);
            MessageDialog.openError(shell, Messages.OpenGCAction_gcov_error, msg);
            return;
        }
        if (!isFileValid(pair.gcno)) {
            String msg = NLS.bind(Messages.OpenGCAction_file_dne_compile, pair.gcno);
            MessageDialog.openError(shell, Messages.OpenGCAction_gcov_error, msg);
            return;
        }

		IDialogSettings ds = PlatformUI.getDialogSettingsProvider(FrameworkUtil.getBundle(OpenGCAction.class))
				.getDialogSettings();
        IDialogSettings defaultMapping = ds.getSection(OpenGCDialog.class.getName());
        if (defaultMapping == null) {
            defaultMapping = ds.addNewSection(OpenGCDialog.class.getName());
        }
        String defaultBinary = defaultMapping.get(file.toOSString());
        if (defaultBinary == null || defaultBinary.isEmpty() || !exists(defaultBinary)) {
        	//FIXME EK-LINUXTOOLS: defaultBinary = getDefaultBinary(file);
			IResource bin_resource = STSymbolManager.sharedInstance.findOneAndOnlyBinary(file);
			if (bin_resource != null) {
				defaultBinary = bin_resource.getLocation().toOSString();
			} else {
				defaultBinary = ""; //$NON-NLS-1$
			}
        }

        OpenGCDialog d = new OpenGCDialog(shell, defaultBinary, file);
        if (d.open() != Window.OK) {
            return;
        }
        // start a thread so we can return control from UI thread until needed
        Thread t = new Thread(() -> {
        	displayCoverage(file, d.getBinaryFile(), pair.gcda, d.isCompleteCoverageResultWanted());
        });
        t.start();
    }

